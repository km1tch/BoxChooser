# Production Caddyfile - receives HTTP from host Caddy
# Host Caddy handles: SSL/TLS, HTTPS redirect, real IP forwarding

:80 {

	# Enable compression
	encode gzip

	# Comprehensive security headers for production
	header {
		# Prevent MIME type sniffing
		X-Content-Type-Options "nosniff"
		
		# Prevent clickjacking
		X-Frame-Options "DENY"
		
		# Enable XSS protection
		X-XSS-Protection "1; mode=block"
		
		# Control referrer information
		Referrer-Policy "strict-origin-when-cross-origin"
		
		# Content Security Policy
		Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://code.jquery.com https://cdn.datatables.net; style-src 'self' 'unsafe-inline' https://cdn.datatables.net https://cdnjs.cloudflare.com; img-src 'self' data: blob: https://cdn.datatables.net; font-src 'self' data: https://cdnjs.cloudflare.com; connect-src 'self'"
		
		# Permissions Policy
		Permissions-Policy "geolocation=(), microphone=(), camera=()"
		
		# Remove server header
		-Server
	}

	# API routes with strict CORS
	@api {
		path /api/*
	}
	
	handle @api {
		# Trust the headers from host Caddy - they've already been cleaned
		header {
			# Strict CORS for production
			Access-Control-Allow-Origin "{$ALLOWED_ORIGINS}"
			Access-Control-Allow-Credentials "true"
			Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
			Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With"
			Access-Control-Max-Age "86400"
		}
		
		# Handle preflight requests
		@options {
			method OPTIONS
		}
		handle @options {
			respond 204
		}
		
		# Proxy to backend
		reverse_proxy backend:8000 {
			# Just pass through - host Caddy already set the real client IP
			# Add timeout settings for production
			transport http {
				read_timeout 30s
				write_timeout 30s
			}
		}
	}

	# Health check endpoint
	handle /health {
		reverse_proxy backend:8000
	}

	# Serve static files
	root * /srv/frontend

	# JavaScript files with proper MIME type and caching
	handle /js/*.js {
		header Content-Type "application/javascript"
		header Cache-Control "public, max-age=86400"
		file_server
	}

	# CSS files with caching
	handle /assets/css/*.css {
		header Content-Type "text/css"
		header Cache-Control "public, max-age=86400"
		file_server
	}

	# Favicon
	handle /favicon.ico {
		rewrite * /assets/favicon.ico
		header Cache-Control "public, max-age=604800"
		file_server
	}

	# Cache static assets aggressively
	handle /assets/* {
		header Cache-Control "public, max-age=31536000, immutable"
		file_server
	}

	# HTML pages (no caching for dynamic content)
	handle /login {
		rewrite * /login.html
		header Cache-Control "no-cache, no-store, must-revalidate"
		file_server
	}

	handle /wizard {
		rewrite * /wizard.html
		header Cache-Control "no-cache, no-store, must-revalidate"
		file_server
	}

	handle /prices {
		rewrite * /prices.html
		header Cache-Control "no-cache, no-store, must-revalidate"
		file_server
	}

	handle /import {
		rewrite * /import.html
		header Cache-Control "no-cache, no-store, must-revalidate"
		file_server
	}

	handle /floorplan {
		rewrite * /floorplan.html
		header Cache-Control "no-cache, no-store, must-revalidate"
		file_server
	}

	handle /settings {
		rewrite * /settings.html
		header Cache-Control "no-cache, no-store, must-revalidate"
		file_server
	}

	handle /packing {
		rewrite * /packing.html
		header Cache-Control "no-cache, no-store, must-revalidate"
		file_server
	}

	handle /boxes {
		rewrite * /boxes.html
		file_server
	}

	# Root serves index.html (which redirects to wizard)
	handle / {
		rewrite * /index.html
		header Cache-Control "no-cache, no-store, must-revalidate"
		file_server
	}

	# Default file server
	handle {
		file_server
	}

	# Enable access logs for production monitoring
	log {
		output file /data/access.log {
			roll_size 100mb
			roll_keep 10
		}
	}
}
